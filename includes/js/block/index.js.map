{"version":3,"file":"index.js","sources":["../../../applications/apps/block/src/index.tsx"],"sourcesContent":["import React from \"react\";\nimport type { WCBlocksRegistry, WCSettings, WPHtmlEntities } from \"./global\";\n\n\n// Ensure TypeScript understands window properties\ndeclare global {\n  interface Window {\n    wc: {\n      wcBlocksRegistry: WCBlocksRegistry;\n      wcSettings: WCSettings;\n    };\n    wp: {\n      htmlEntities: WPHtmlEntities;\n    };\n  }\n}\n\n// Extract functions and settings from the global objects\nconst { registerPaymentMethod } = window.wc.wcBlocksRegistry;\nconst { decodeEntities } = window.wp.htmlEntities;\nconst { getSetting } = window.wc.wcSettings;\n\n// Retrieve settings and define the label\nconst settings = getSetting(\"xprcheckout_data\", {}) as {\n  description?: string;\n  supports?: any;\n};\nconst label = decodeEntities(\"XPRCheckout\");\n\n// Define Content component with settings description\nconst Content: React.FC = () => {\n  return <>{decodeEntities(settings.description || \"\")}</>;\n};\n\n// Define Label component to display the payment method label\nconst Label: React.FC<{ components: { PaymentMethodLabel: React.FC<{ text: string }> } }> = (props) => {\n  const { PaymentMethodLabel } = props.components;\n  return <PaymentMethodLabel text={label} />;\n};\n\n// Register the payment method with TypeScript typing\nregisterPaymentMethod({\n  name: \"xprcheckout\",\n  label: <Label components={{ PaymentMethodLabel: ({ text }) => <span>{text}</span> }} />,\n  content: <Content />,\n  edit: <Content />,\n  canMakePayment: () => true,\n  ariaLabel: label.toString(),\n  supports: {\n    features: settings.supports,\n  },\n});\n"],"names":["_jsxRuntime","require","registerPaymentMethod","window","wc","wcBlocksRegistry","decodeEntities","wp","htmlEntities","getSetting","wcSettings","settings","label","Content","jsx","Fragment","children","description","Label","props","PaymentMethodLabel","components","text","name","_ref","content","edit","canMakePayment","ariaLabel","toString","supports","features"],"mappings":";;;;AA+BS,MAAAA,cAAAC,QAAA,mBAAA;AAbT,MAAQC,wBAA0BC,OAAOC,GAAGC,iBAApCH;AACR,MAAQI,iBAAmBH,OAAOI,GAAGC,aAA7BF;AACR,MAAQG,aAAeN,OAAOC,GAAGM,WAAzBD;AAGR,MAAME,WAAWF,WAAW,oBAAoB,EAAE;AAIlD,MAAMG,QAAQN,eAAe,aAAa;AAG1C,MAAMO,UAAoB,SAApBA,WAA0B;AAC9B,+BAAUC,YAAA,KAAAC,sBAAA;AAAA,MAAAC,UAAAV,eAAeK,SAASM,eAAe,EAAE;AAAA,IAAE,CAAA;AAAA,EACvD;AAGA,MAAMC,QAAsF,SAAtFA,OAAuFC,OAAU;AAC/F,QAAEC,qBAAuBD,MAAME,WAA7BD;AACD,WAAAN,oBAAAA,YAAA,KAACM,oBAAmB;AAAA,MAAAE,MAAMV;AAAAA,IAAO,CAAA;AAAA,EAC1C;AAGAV,wBAAsB;AAAA,IACpBqB,MAAM;AAAA,IACNX,OAAOE,oBAAAA,YAAA,KAACI,OAAM;AAAA,MAAAG,YAAY;AAAA,QAAED,oBAAoB,SAApBA,mBAAoBI,MAAA;AAAA,cAAGF,OAAAE,KAAAF;AAAA,iBAAWR,oBAAAA,YAAA,KAAC,QAAM;AAAA,YAAAE,UAAAM;AAAAA,UAAA,CAAK;AAAA;MAAQ;AAAA,IAAG,CAAA;AAAA,IACrFG,8CAAUZ,SAAQ,CAAA,CAAA;AAAA,IAClBa,2CAAOb,SAAQ,CAAA,CAAA;AAAA,IACfc,gBAAgB,SAAhBA;aAAsB;AAAA,IAAA;AAAA,IACtBC,WAAWhB,MAAMiB,SAAS;AAAA,IAC1BC,UAAU;AAAA,MACRC,UAAUpB,SAASmB;AAAAA,IACrB;AAAA,EACF,CAAC;;"}